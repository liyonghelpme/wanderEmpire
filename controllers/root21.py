# -*- coding: utf-8 -*-
"""Main Controller"""

from tg import expose, flash, require, url, request, redirect
from pylons.i18n import ugettext as _, lazy_ugettext as l_
from tgext.admin.tgadminconfig import TGAdminConfig
from tgext.admin.controller import AdminController
from repoze.what import predicates
from sqlalchemy.exceptions import InvalidRequestError
from sqlalchemy.exceptions import IntegrityError
from stchong.lib.base import BaseController
from stchong.model import DBSession, metadata,operationalData,businessWrite,businessRead,warMap,Map
from stchong import model
from stchong.controllers.secure import SecureController
from datetime import datetime
from stchong.controllers.error import ErrorController
import time
__all__ = ['RootController']


class RootController(BaseController):
    """
    The root controller for the stchong application.

    All the other controllers and WSGI applications should be mounted on this
    controller. For example::

        panel = ControlPanelController()
        another_app = AnotherWSGIApplication()

    Keep in mind that WSGI applications shouldn't be mounted directly: They
    must be wrapped around with :class:`tg.controllers.WSGIAppController`.

    """
    secc = SecureController()
    global Building_Price
    global Plant_Price
    global beginTime
    global increasefood
    global increasebuild
    global increaseheishi
    global houses
    global soldie
    global soldiernum
    global production
    global read
    global mapKind
    global makeMap
    global insert
    global getMap
    global upd
    global twenty
    global fifty
    global hundred
    global threehundred
    global fivehundred
    global thousand
    global god
    global ob
    global housebuild#民居
    global resourcebuild#资源建筑物
    global milbuild#军事建筑物
    global businessbuild#商业建筑物
    global godbuild#神像建筑物
    global decorationbuild#装饰
    global specialgoods
    global getGround_id
    global tboxnum
    twenty=[[4,6],[8,6],[9,5],[14,6],[15,5],[26,6],[27,5],[31,6],[36,5],[44,5],[49,5],[52,6],[57,6],[63,6],[66,5],[70,6],[72,5],[79,6],[92,6],[94,6]]
    fifty=[[6,6],[8,5],[10,6],[14,6],[17,6],[20,6],[29,6],[31,6],[54,6],[64,6],[65,5],[67,6],[68,5],[76,6],[81,5],[85,6],[103,6],[104,6],[107,5],[109,5],[112,5],[116,5],[117,5],[118,5],[121,5],[131,6],[145,6],[147,6],[152,6],[153,5],[158,6],[162,6],[163,6],[166,6],[170,5],[177,5],[181,6],[185,5],[197,6],[198,6],[207,6],[209,6],[215,5],[223,5],[227,6],[229,6],[236,5],[240,6],[242,6],[244,5]]
    hundred=[[6,6],[10,6],[14,6],[17,6],[20,5],[23,6],[35,6],[39,6],[40,6],[41,6],[44,6],[47,5],[54,6],[56,6],[65,5],[66,6],[73,6],[77,6],[81,6],[88,6],[102,6],[104,6],[107,5],[108,5],[109,5],[111,5],[115,6],[116,5],[131,6],[136,5],[141,5],[145,6],[152,6],[163,6],[165,5],[180,6],[182,6],[185,5],[188,5],[193,5],[198,6],[209,6],[216,5],[224,5],[236,5],[240,6],[244,5],[258,5],[260,6],[270,6],[278,6],[279,6],[281,6],[302,5],[309,5],[314,6],[315,5],[317,6],[318,5],[326,6],[328,5],[333,6],[335,6],[339,5],[348,6],[353,6],[357,5],[360,6],[361,6],[362,5],[366,5],[367,5],[368,5],[371,5],[373,5],[389,5],[390,5],[394,5],[403,5],[408,6],[416,6],[420,5],[421,5],[422,6],[424,5],[427,5],[432,5],[433,6],[434,6],[454,6],[457,6],[465,5],[466,6],[473,5],[479,6],[481,6],[485,6],[490,6],[492,6],[498,5]]
    threehundred=[[8,5],[13,6],[39,6],[41,6],[45,5],[52,6],[54,5],[56,6],[66,6],[74,6],[77,6],[78,6],[80,5],[83,6],[88,6],[91,5],[102,5],[104,6],[108,5],[111,5],[112,6],[120,6],[122,5],[125,6],[126,5],[131,6],[138,6],[140,6],[141,5],[144,6],[147,6],[158,6],[163,6],[172,6],[178,6],[183,6],[186,6],[196,6],[205,5],[207,5],[219,5],[228,5],[239,5],[244,6],[247,6],[250,5],[251,5],[260,6],[261,5],[270,6],[281,5],[289,5],[294,6],[299,5],[301,6],[306,5],[307,6],[309,5],[314,6],[326,6],[333,5],[337,5],[338,6],[355,5],[358,5],[359,5],[365,5],[371,5],[372,5],[385,6],[390,6],[399,6],[401,5],[402,5],[413,5],[414,6],[418,5],[421,6],[422,5],[426,5],[439,5],[446,5],[448,5],[454,6],[464,5],[465,5],[467,5],[477,6],[481,6],[482,5],[484,5],[485,6],[490,6],[492,5],[495,6],[506,6],[509,6],[512,5],[520,5],[525,5],[529,6],[530,5],[531,6],[535,6],[540,6],[548,5],[549,5],[562,6],[566,6],[571,5],[573,6],[586,5],[588,5],[595,6],[599,5],[602,6],[603,5],[609,5],[612,6],[630,6],[640,5],[647,5],[650,5],[654,6],[665,6],[671,6],[682,6],[693,5],[695,5],[702,5],[720,5],[721,5],[726,6],[729,6],[733,6],[736,5],[737,6],[741,5],[744,5],[745,5],[746,5],[754,6],[758,5],[762,5],[763,5],[773,6],[778,6],[779,6],[787,6],[792,6],[797,6],[805,6],[807,5],[812,5],[814,6],[815,6],[824,6],[826,6],[828,5],[834,5],[839,5],[842,5],[845,6],[850,6],[859,6],[860,6],[861,6],[868,5],[869,5],[877,5],[878,6],[894,5],[896,6],[899,6],[900,5],[919,6],[921,5],[927,5],[931,6],[934,6],[937,5],[938,5],[939,5],[942,6],[949,6],[957,6],[960,6],[961,6],[977,6],[985,6],[987,6],[990,6],[991,5],[993,6],[996,5],[1012,6],[1014,5],[1023,6],[1026,6],[1034,6],[1047,5],[1056,6],[1058,6],[1062,5],[1063,6],[1080,6],[1084,6],[1085,5],[1086,6],[1092,5],[1093,6],[1103,6],[1104,5],[1109,5],[1111,5],[1114,5],[1115,6],[1116,6],[1121,5],[1128,6],[1131,5],[1136,5],[1142,5],[1153,5],[1156,6],[1161,5],[1164,5],[1165,5],[1167,5],[1170,6],[1175,5],[1180,6],[1188,5],[1198,6],[1209,6],[1216,5],[1219,5],[1224,5],[1225,5],[1226,6],[1240,6],[1243,6],[1246,5],[1258,6],[1259,6],[1267,5],[1271,6],[1282,5],[1287,5],[1292,6],[1295,5],[1297,6],[1299,5],[1302,5],[1305,5],[1317,5],[1330,6],[1333,6],[1334,6],[1337,6],[1340,6],[1351,6],[1353,6],[1357,5],[1359,5],[1364,5],[1367,5],[1371,5],[1380,5],[1387,6],[1389,5],[1391,5],[1392,6],[1394,6],[1396,6],[1399,5],[1408,6],[1412,6],[1420,5],[1422,6],[1424,5],[1427,6],[1431,6],[1433,6],[1444,6],[1447,6],[1455,5],[1466,6],[1468,5],[1469,5],[1472,6],[1476,6],[1478,5],[1481,6],[1483,6],[1484,6],[1489,6],[1490,5],[1491,6],[1492,6]]
    fivehundred=[[12,6],[20,6],[27,5],[32,6],[34,6],[41,6],[45,5],[52,5],[53,6],[54,5],[56,5],[62,6],[63,6],[65,5],[72,5],[76,5],[78,5],[92,5],[93,6],[99,5],[102,6],[104,6],[107,5],[109,5],[110,5],[114,5],[116,6],[122,6],[131,6],[136,5],[139,6],[141,6],[147,6],[154,6],[163,6],[170,6],[176,5],[180,6],[185,5],[189,5],[196,5],[202,5],[204,6],[206,6],[209,6],[210,6],[213,6],[214,5],[223,6],[224,5],[226,6],[229,6],[240,6],[248,5],[251,5],[254,6],[263,5],[267,5],[270,5],[273,6],[274,5],[282,6],[284,5],[289,5],[294,6],[295,5],[298,5],[299,5],[302,6],[311,6],[315,6],[321,5],[333,5],[337,5],[348,6],[350,6],[359,5],[360,6],[361,6],[365,5],[366,5],[367,6],[369,5],[370,5],[371,6],[372,5],[374,5],[380,6],[384,6],[395,5],[396,6],[400,5],[402,5],[408,6],[421,5],[422,5],[423,5],[426,6],[439,5],[440,6],[446,6],[451,5],[452,6],[454,6],[459,5],[463,6],[465,5],[469,5],[478,5],[480,6],[481,6],[488,5],[490,6],[491,6],[493,5],[500,5],[508,5],[509,6],[517,6],[518,6],[520,5],[522,6],[523,6],[530,5],[538,5],[540,6],[541,6],[549,5],[567,5],[571,5],[573,6],[583,5],[586,6],[597,6],[602,5],[603,6],[611,5],[615,6],[631,5],[644,6],[655,5],[656,6],[664,5],[665,5],[673,6],[677,5],[685,5],[696,6],[697,5],[711,6],[723,5],[728,5],[729,6],[733,5],[737,5],[739,6],[742,6],[745,5],[746,5],[749,5],[761,5],[762,5],[770,5],[771,6],[773,6],[777,6],[778,6],[783,5],[786,5],[792,6],[794,6],[797,6],[798,6],[807,5],[808,5],[828,6],[837,6],[839,5],[840,5],[841,6],[844,5],[848,6],[851,6],[859,6],[863,6],[864,5],[868,5],[874,5],[880,5],[889,5],[892,6],[894,5],[898,5],[899,6],[902,5],[904,6],[912,6],[920,5],[924,5],[927,5],[931,6],[933,6],[934,6],[936,6],[941,6],[943,5],[948,5],[951,6],[956,6],[957,5],[960,6],[963,6],[965,5],[966,6],[973,5],[982,5],[990,5],[997,6],[1002,6],[1006,6],[1012,5],[1026,6],[1030,5],[1033,6],[1038,6],[1044,6],[1045,5],[1047,5],[1048,5],[1052,6],[1056,6],[1058,6],[1065,5],[1066,6],[1067,5],[1069,5],[1074,6],[1076,6],[1086,5],[1088,6],[1092,5],[1102,5],[1108,5],[1110,5],[1121,6],[1131,6],[1134,5],[1136,5],[1138,5],[1143,5],[1153,5],[1168,5],[1178,6],[1180,5],[1189,5],[1216,6],[1219,5],[1226,6],[1239,5],[1242,6],[1243,6],[1258,5],[1259,6],[1260,6],[1269,6],[1272,6],[1278,6],[1283,6],[1295,6],[1302,5],[1307,5],[1310,6],[1314,6],[1318,6],[1319,5],[1328,5],[1330,6],[1331,6],[1334,5],[1348,6],[1353,6],[1355,5],[1359,6],[1378,6],[1387,6],[1390,6],[1391,5],[1392,6],[1394,6],[1396,6],[1399,6],[1422,6],[1426,5],[1427,5],[1432,5],[1446,5],[1455,5],[1457,5],[1468,5],[1472,6],[1477,6],[1481,6],[1498,5],[1513,5],[1535,6],[1536,6],[1537,6],[1547,5],[1562,5],[1565,5],[1566,6],[1570,5],[1580,6],[1588,5],[1593,6],[1595,6],[1596,6],[1604,6],[1608,5],[1620,6],[1621,6],[1622,5],[1631,6],[1634,5],[1640,5],[1641,6],[1645,6],[1646,5],[1649,5],[1653,5],[1656,6],[1658,6],[1663,6],[1672,6],[1675,6],[1676,5],[1678,6],[1681,5],[1690,6],[1692,5],[1694,5],[1695,5],[1707,5],[1712,6],[1721,5],[1722,5],[1726,6],[1736,5],[1740,6],[1744,5],[1746,5],[1750,5],[1761,6],[1770,6],[1772,6],[1779,6],[1780,6],[1784,6],[1785,6],[1787,6],[1790,6],[1791,5],[1799,5],[1804,6],[1806,5],[1807,6],[1809,5],[1826,6],[1828,5],[1833,6],[1837,6],[1840,6],[1845,6],[1850,5],[1855,6],[1856,5],[1858,5],[1871,5],[1877,5],[1885,6],[1894,5],[1901,5],[1904,5],[1905,5],[1910,5],[1913,6],[1914,5],[1916,5],[1918,6],[1921,5],[1926,5],[1927,6],[1939,5],[1942,5],[1943,5],[1945,6],[1949,6],[1961,6],[1963,5],[1985,6],[1992,6],[1995,6],[1997,6],[2008,6],[2009,6],[2013,6],[2016,6],[2018,5],[2020,5],[2025,5],[2026,6],[2032,6],[2036,5],[2038,6],[2039,6],[2041,6],[2045,5],[2049,5],[2056,6],[2057,6],[2059,6],[2063,6],[2065,5],[2067,5],[2074,6],[2077,6],[2083,6],[2085,6],[2088,6],[2091,6],[2106,5],[2107,6],[2109,5],[2116,5],[2120,5],[2134,5],[2138,6],[2140,6],[2141,5],[2142,5],[2150,5],[2161,5],[2168,6],[2179,6],[2182,6],[2186,6],[2190,5],[2193,5],[2194,5],[2198,6],[2205,5],[2214,5],[2216,5],[2220,6],[2237,5],[2240,6],[2242,5],[2247,6],[2248,5],[2255,5],[2259,5],[2260,6],[2270,5],[2274,6],[2278,5],[2281,6],[2282,5],[2287,6],[2305,5],[2312,5],[2313,6],[2314,6],[2324,6],[2326,6],[2329,5],[2330,6],[2342,5],[2357,5],[2359,6],[2361,6],[2367,5],[2368,6],[2369,6],[2378,6],[2392,5],[2413,5],[2416,5],[2420,5],[2425,5],[2433,6],[2446,5],[2457,6],[2465,6],[2475,5],[2476,6],[2483,6],[2488,5],[2490,6],[2491,5],[2495,6]]
    thousand=[[10,6],[12,6],[27,5],[32,6],[34,6],[40,5],[41,6],[45,5],[46,6],[49,6],[53,6],[54,5],[56,5],[62,6],[63,6],[64,6],[65,5],[75,6],[78,5],[80,6],[85,6],[86,6],[92,5],[94,5],[97,5],[102,5],[107,5],[109,6],[110,5],[116,6],[122,6],[127,5],[134,5],[136,5],[140,6],[141,6],[142,5],[144,6],[154,6],[159,5],[162,6],[163,6],[164,6],[170,6],[174,5],[176,5],[180,5],[185,5],[196,5],[197,6],[204,6],[206,6],[208,5],[210,6],[214,5],[221,5],[223,6],[224,6],[226,6],[235,5],[236,6],[246,6],[251,6],[263,5],[265,6],[271,6],[274,5],[275,5],[289,5],[294,6],[295,5],[297,5],[311,6],[322,5],[329,5],[333,5],[337,5],[338,6],[344,5],[345,6],[348,6],[359,5],[360,6],[361,6],[366,5],[371,6],[372,6],[374,5],[380,6],[408,6],[410,6],[415,5],[421,5],[422,5],[442,5],[449,5],[451,6],[454,6],[460,5],[463,6],[465,5],[469,5],[471,6],[472,6],[474,6],[477,6],[481,6],[491,6],[492,5],[493,5],[497,5],[500,5],[509,6],[517,5],[522,6],[523,6],[527,6],[531,6],[533,6],[536,5],[537,6],[538,5],[541,6],[546,6],[571,6],[572,5],[573,6],[586,6],[587,5],[589,5],[596,6],[597,6],[601,6],[602,5],[607,5],[611,5],[612,5],[615,6],[624,6],[630,6],[631,5],[637,6],[640,6],[644,6],[649,5],[655,5],[657,5],[664,6],[665,5],[668,6],[670,5],[673,6],[696,6],[720,5],[723,5],[737,5],[738,6],[742,6],[743,6],[745,5],[755,6],[760,5],[761,5],[763,6],[772,6],[777,6],[778,6],[780,5],[782,5],[792,6],[795,5],[797,6],[798,6],[800,5],[802,6],[805,6],[821,5],[822,6],[839,5],[840,5],[841,6],[844,5],[845,5],[848,6],[852,5],[854,5],[862,6],[863,6],[867,5],[880,5],[884,5],[889,5],[892,6],[894,5],[908,6],[912,6],[920,6],[923,6],[924,5],[927,5],[934,6],[941,6],[953,5],[956,6],[957,6],[959,6],[963,6],[964,5],[965,5],[976,6],[981,6],[982,5],[990,5],[992,5],[997,6],[999,5],[1002,5],[1004,5],[1008,6],[1012,5],[1029,6],[1030,6],[1033,6],[1037,6],[1038,6],[1044,6],[1045,5],[1046,5],[1047,5],[1048,5],[1052,6],[1054,6],[1056,6],[1058,6],[1060,6],[1061,6],[1069,5],[1073,5],[1074,6],[1077,5],[1085,6],[1086,5],[1088,6],[1098,5],[1114,5],[1129,6],[1131,6],[1143,5],[1146,6],[1152,5],[1153,5],[1163,6],[1168,5],[1170,6],[1171,6],[1179,6],[1181,5],[1184,5],[1188,5],[1189,6],[1195,5],[1205,5],[1206,6],[1207,6],[1226,6],[1237,6],[1239,5],[1243,6],[1244,6],[1258,5],[1259,6],[1263,6],[1272,6],[1273,6],[1277,5],[1278,6],[1280,6],[1283,6],[1293,5],[1295,6],[1302,5],[1304,5],[1306,6],[1307,5],[1310,6],[1314,6],[1315,5],[1317,5],[1324,6],[1328,5],[1331,6],[1340,5],[1352,6],[1353,5],[1359,6],[1366,5],[1379,6],[1381,6],[1392,6],[1396,6],[1399,5],[1404,5],[1422,6],[1427,5],[1432,5],[1434,5],[1443,5],[1445,6],[1452,6],[1455,5],[1456,6],[1463,6],[1468,5],[1469,6],[1471,5],[1480,5],[1489,5],[1490,5],[1495,6],[1498,5],[1502,6],[1513,5],[1518,6],[1520,6],[1524,6],[1528,6],[1532,5],[1542,6],[1551,5],[1552,5],[1557,5],[1562,5],[1563,5],[1566,6],[1574,6],[1585,6],[1595,6],[1598,6],[1600,6],[1603,5],[1605,5],[1608,5],[1610,6],[1612,6],[1621,6],[1635,6],[1640,6],[1645,6],[1646,5],[1653,5],[1656,6],[1665,6],[1672,5],[1681,6],[1692,5],[1694,5],[1695,6],[1718,6],[1720,5],[1722,5],[1725,5],[1730,5],[1732,6],[1733,5],[1736,5],[1740,6],[1744,5],[1745,5],[1746,5],[1750,5],[1759,5],[1761,6],[1770,6],[1775,5],[1784,6],[1785,6],[1787,6],[1790,6],[1791,5],[1799,5],[1804,6],[1806,5],[1807,6],[1809,5],[1816,5],[1821,6],[1826,6],[1828,5],[1832,5],[1833,6],[1836,5],[1837,6],[1838,6],[1839,6],[1840,6],[1850,5],[1856,5],[1879,6],[1883,5],[1885,6],[1887,6],[1888,5],[1894,5],[1900,6],[1905,6],[1913,6],[1914,5],[1918,6],[1924,5],[1925,6],[1926,5],[1939,6],[1940,6],[1942,5],[1950,5],[1956,6],[1957,5],[1961,6],[1967,5],[1971,6],[1976,6],[1977,6],[1985,6],[1988,6],[1995,6],[2002,5],[2006,5],[2009,6],[2011,5],[2012,5],[2018,5],[2020,5],[2025,6],[2026,6],[2032,6],[2036,5],[2037,5],[2045,5],[2056,6],[2057,6],[2070,5],[2073,5],[2074,6],[2080,5],[2083,6],[2103,5],[2106,5],[2107,6],[2109,5],[2111,6],[2116,5],[2120,5],[2129,5],[2141,5],[2150,6],[2158,6],[2161,5],[2179,6],[2181,5],[2182,6],[2186,6],[2190,5],[2193,6],[2194,5],[2198,6],[2200,5],[2204,6],[2205,5],[2210,5],[2211,6],[2214,5],[2217,5],[2221,6],[2226,5],[2232,5],[2244,6],[2246,6],[2247,6],[2248,5],[2255,5],[2257,6],[2260,6],[2265,6],[2274,6],[2281,5],[2293,5],[2311,5],[2312,5],[2314,6],[2339,6],[2347,5],[2357,5],[2359,6],[2361,6],[2362,5],[2367,6],[2368,6],[2372,5],[2378,6],[2384,6],[2392,6],[2395,6],[2413,5],[2414,5],[2416,5],[2425,5],[2429,5],[2431,5],[2433,6],[2434,6],[2441,5],[2446,5],[2449,6],[2450,6],[2452,6],[2457,5],[2461,5],[2466,6],[2471,6],[2480,6],[2483,6],[2490,6],[2503,6],[2504,6],[2512,6],[2520,6],[2523,5],[2541,6],[2552,5],[2555,5],[2566,5],[2568,5],[2572,5],[2578,5],[2580,6],[2581,5],[2587,5],[2592,6],[2593,6],[2595,6],[2599,5],[2602,6],[2609,5],[2614,5],[2620,5],[2623,5],[2631,5],[2639,6],[2642,5],[2647,6],[2648,6],[2658,5],[2659,5],[2667,6],[2680,6],[2685,6],[2689,6],[2694,6],[2702,5],[2709,6],[2714,5],[2724,5],[2728,5],[2729,6],[2747,6],[2751,5],[2754,6],[2764,5],[2767,5],[2772,6],[2782,6],[2784,5],[2798,5],[2799,5],[2802,6],[2805,5],[2815,6],[2827,6],[2832,6],[2833,5],[2834,5],[2850,6],[2852,6],[2859,5],[2860,6],[2865,5],[2867,6],[2869,5],[2870,5],[2872,5],[2884,5],[2894,6],[2895,5],[2896,6],[2900,5],[2906,5],[2910,5],[2918,5],[2920,5],[2923,5],[2940,6],[2943,6],[2946,6],[2950,5],[2952,6],[2956,6],[2958,6],[2959,5],[2965,6],[2978,5],[2980,6],[2981,5],[2988,5],[3008,5],[3012,6],[3017,6],[3019,6],[3020,5],[3023,5],[3027,6],[3030,5],[3032,6],[3034,6],[3038,5],[3040,6],[3054,6],[3055,6],[3064,5],[3066,6],[3070,6],[3078,6],[3086,5],[3095,6],[3101,6],[3103,6],[3112,5],[3116,6],[3118,6],[3123,6],[3128,5],[3134,5],[3148,6],[3152,5],[3156,6],[3161,5],[3177,5],[3178,5],[3182,6],[3185,5],[3191,5],[3202,6],[3212,6],[3214,6],[3231,5],[3233,5],[3240,6],[3241,5],[3242,6],[3249,5],[3253,6],[3256,5],[3260,5],[3270,5],[3271,6],[3276,6],[3277,6],[3279,5],[3282,5],[3283,5],[3287,6],[3294,6],[3307,5],[3308,5],[3312,6],[3316,6],[3329,5],[3336,5],[3337,6],[3340,5],[3341,6],[3347,6],[3351,6],[3356,6],[3363,5],[3364,5],[3368,5],[3375,6],[3398,5],[3399,6],[3404,6],[3417,5],[3420,5],[3433,6],[3435,6],[3436,6],[3448,5],[3451,6],[3457,5],[3458,6],[3466,6],[3467,6],[3468,6],[3473,5],[3475,5],[3480,6],[3488,5],[3490,6],[3502,6],[3506,6],[3512,5],[3519,6],[3530,5],[3536,6],[3549,6],[3551,5],[3564,6],[3566,6],[3568,6],[3574,6],[3575,5],[3576,6],[3586,5],[3591,6],[3592,5],[3608,5],[3610,5],[3618,6],[3623,5],[3626,6],[3627,6],[3631,6],[3632,6],[3634,5],[3636,5],[3638,5],[3643,6],[3654,5],[3664,6],[3678,6],[3679,6],[3689,5],[3690,6],[3705,6],[3715,6],[3716,6],[3718,6],[3719,5],[3742,6],[3753,6],[3760,6],[3765,5],[3769,6],[3773,5],[3778,6],[3780,6],[3805,6],[3808,5],[3815,5],[3817,5],[3819,5],[3828,5],[3830,6],[3834,5],[3846,5],[3848,6],[3849,6],[3853,6],[3855,5],[3861,6],[3865,6],[3870,6],[3877,5],[3890,6],[3899,6],[3900,6],[3909,6],[3915,6],[3932,5],[3935,6],[3938,5],[3945,5],[3946,6],[3964,5],[3969,6],[3972,6],[3977,6],[3998,6],[4000,6],[4005,5],[4022,5],[4023,5],[4033,5],[4035,6],[4037,6],[4038,5],[4046,5],[4047,5],[4056,5],[4060,6],[4065,5],[4070,5],[4080,6],[4081,5],[4086,5],[4093,6],[4096,6],[4099,6],[4104,6],[4106,5],[4117,6],[4120,6],[4122,5],[4131,6],[4134,5],[4135,6],[4140,5],[4141,6],[4146,5],[4149,6],[4151,5],[4153,5],[4158,6],[4163,6],[4168,5],[4172,6],[4175,6],[4176,5],[4177,5],[4178,6],[4180,6],[4181,5],[4182,6],[4188,5],[4190,6],[4192,6],[4193,5],[4204,6],[4206,5],[4207,5],[4208,5],[4212,6],[4216,5],[4221,5],[4226,6],[4245,5],[4248,5],[4250,6],[4259,6],[4260,6],[4262,5],[4264,6],[4268,5],[4278,5],[4279,6],[4280,6],[4282,6],[4295,5],[4301,5],[4302,5],[4304,5],[4309,6],[4314,5],[4330,5],[4333,5],[4342,6],[4345,6],[4351,5],[4355,6],[4358,5],[4360,6],[4363,6],[4371,5],[4377,5],[4401,5],[4402,6],[4403,5],[4404,5],[4414,5],[4416,5],[4419,6],[4421,5],[4426,6],[4427,6],[4434,6],[4439,5],[4444,6],[4445,6],[4448,6],[4449,6],[4455,6],[4462,5],[4464,6],[4475,6],[4478,5],[4492,6],[4497,6],[4502,5],[4504,5],[4505,5],[4508,6],[4509,6],[4516,6],[4525,5],[4533,5],[4538,6],[4539,6],[4541,5],[4543,5],[4544,6],[4559,6],[4565,5],[4566,6],[4567,5],[4568,5],[4573,5],[4577,6],[4585,6],[4592,6],[4596,6],[4609,5],[4611,5],[4620,6],[4622,5],[4634,5],[4635,5],[4638,6],[4640,6],[4642,5],[4647,6],[4650,6],[4653,5],[4657,6],[4661,5],[4674,6],[4682,5],[4693,5],[4697,5],[4700,5],[4705,5],[4716,5],[4720,6],[4725,5],[4730,6],[4731,6],[4740,6],[4742,5],[4755,6],[4759,5],[4769,5],[4770,5],[4776,5],[4778,5],[4781,6],[4782,5],[4787,6],[4789,5],[4795,6],[4805,5],[4810,6],[4819,6],[4826,6],[4827,6],[4829,5],[4830,6],[4831,6],[4837,6],[4841,5],[4856,6],[4867,5],[4869,6],[4877,5],[4879,5],[4886,6],[4892,5],[4896,5],[4901,5],[4914,5],[4920,5],[4929,5],[4930,5],[4933,6],[4935,5],[4936,5],[4940,6],[4951,6],[4953,5],[4956,5],[4957,6],[4963,5],[4965,6],[4968,6],[4976,6],[4978,5],[4983,6],[4984,6],[4986,5],[4988,5],[4990,6],[4991,5],[4993,5]]
    ob=[[[4,6],[8,6],[9,5],[14,6],[15,5],[26,6],[27,5],[31,6],[36,5],[44,5],[49,5],[52,6],[57,6],[63,6],[66,5],[70,6],[72,5],[79,6],[92,6],[94,6]],[[6,6],[8,5],[10,6],[14,6],[17,6],[20,6],[29,6],[31,6],[54,6],[64,6],[65,5],[67,6],[68,5],[76,6],[81,5],[85,6],[103,6],[104,6],[107,5],[109,5],[112,5],[116,5],[117,5],[118,5],[121,5],[131,6],[145,6],[147,6],[152,6],[153,5],[158,6],[162,6],[163,6],[166,6],[170,5],[177,5],[181,6],[185,5],[197,6],[198,6],[207,6],[209,6],[215,5],[223,5],[227,6],[229,6],[236,5],[240,6],[242,6],[244,5]],[[6,6],[10,6],[14,6],[17,6],[20,5],[23,6],[35,6],[39,6],[40,6],[41,6],[44,6],[47,5],[54,6],[56,6],[65,5],[66,6],[73,6],[77,6],[81,6],[88,6],[102,6],[104,6],[107,5],[108,5],[109,5],[111,5],[115,6],[116,5],[131,6],[136,5],[141,5],[145,6],[152,6],[163,6],[165,5],[180,6],[182,6],[185,5],[188,5],[193,5],[198,6],[209,6],[216,5],[224,5],[236,5],[240,6],[244,5],[258,5],[260,6],[270,6],[278,6],[279,6],[281,6],[302,5],[309,5],[314,6],[315,5],[317,6],[318,5],[326,6],[328,5],[333,6],[335,6],[339,5],[348,6],[353,6],[357,5],[360,6],[361,6],[362,5],[366,5],[367,5],[368,5],[371,5],[373,5],[389,5],[390,5],[394,5],[403,5],[408,6],[416,6],[420,5],[421,5],[422,6],[424,5],[427,5],[432,5],[433,6],[434,6],[454,6],[457,6],[465,5],[466,6],[473,5],[479,6],[481,6],[485,6],[490,6],[492,6],[498,5]],[[8,5],[13,6],[39,6],[41,6],[45,5],[52,6],[54,5],[56,6],[66,6],[74,6],[77,6],[78,6],[80,5],[83,6],[88,6],[91,5],[102,5],[104,6],[108,5],[111,5],[112,6],[120,6],[122,5],[125,6],[126,5],[131,6],[138,6],[140,6],[141,5],[144,6],[147,6],[158,6],[163,6],[172,6],[178,6],[183,6],[186,6],[196,6],[205,5],[207,5],[219,5],[228,5],[239,5],[244,6],[247,6],[250,5],[251,5],[260,6],[261,5],[270,6],[281,5],[289,5],[294,6],[299,5],[301,6],[306,5],[307,6],[309,5],[314,6],[326,6],[333,5],[337,5],[338,6],[355,5],[358,5],[359,5],[365,5],[371,5],[372,5],[385,6],[390,6],[399,6],[401,5],[402,5],[413,5],[414,6],[418,5],[421,6],[422,5],[426,5],[439,5],[446,5],[448,5],[454,6],[464,5],[465,5],[467,5],[477,6],[481,6],[482,5],[484,5],[485,6],[490,6],[492,5],[495,6],[506,6],[509,6],[512,5],[520,5],[525,5],[529,6],[530,5],[531,6],[535,6],[540,6],[548,5],[549,5],[562,6],[566,6],[571,5],[573,6],[586,5],[588,5],[595,6],[599,5],[602,6],[603,5],[609,5],[612,6],[630,6],[640,5],[647,5],[650,5],[654,6],[665,6],[671,6],[682,6],[693,5],[695,5],[702,5],[720,5],[721,5],[726,6],[729,6],[733,6],[736,5],[737,6],[741,5],[744,5],[745,5],[746,5],[754,6],[758,5],[762,5],[763,5],[773,6],[778,6],[779,6],[787,6],[792,6],[797,6],[805,6],[807,5],[812,5],[814,6],[815,6],[824,6],[826,6],[828,5],[834,5],[839,5],[842,5],[845,6],[850,6],[859,6],[860,6],[861,6],[868,5],[869,5],[877,5],[878,6],[894,5],[896,6],[899,6],[900,5],[919,6],[921,5],[927,5],[931,6],[934,6],[937,5],[938,5],[939,5],[942,6],[949,6],[957,6],[960,6],[961,6],[977,6],[985,6],[987,6],[990,6],[991,5],[993,6],[996,5],[1012,6],[1014,5],[1023,6],[1026,6],[1034,6],[1047,5],[1056,6],[1058,6],[1062,5],[1063,6],[1080,6],[1084,6],[1085,5],[1086,6],[1092,5],[1093,6],[1103,6],[1104,5],[1109,5],[1111,5],[1114,5],[1115,6],[1116,6],[1121,5],[1128,6],[1131,5],[1136,5],[1142,5],[1153,5],[1156,6],[1161,5],[1164,5],[1165,5],[1167,5],[1170,6],[1175,5],[1180,6],[1188,5],[1198,6],[1209,6],[1216,5],[1219,5],[1224,5],[1225,5],[1226,6],[1240,6],[1243,6],[1246,5],[1258,6],[1259,6],[1267,5],[1271,6],[1282,5],[1287,5],[1292,6],[1295,5],[1297,6],[1299,5],[1302,5],[1305,5],[1317,5],[1330,6],[1333,6],[1334,6],[1337,6],[1340,6],[1351,6],[1353,6],[1357,5],[1359,5],[1364,5],[1367,5],[1371,5],[1380,5],[1387,6],[1389,5],[1391,5],[1392,6],[1394,6],[1396,6],[1399,5],[1408,6],[1412,6],[1420,5],[1422,6],[1424,5],[1427,6],[1431,6],[1433,6],[1444,6],[1447,6],[1455,5],[1466,6],[1468,5],[1469,5],[1472,6],[1476,6],[1478,5],[1481,6],[1483,6],[1484,6],[1489,6],[1490,5],[1491,6],[1492,6]],[[12,6],[20,6],[27,5],[32,6],[34,6],[41,6],[45,5],[52,5],[53,6],[54,5],[56,5],[62,6],[63,6],[65,5],[72,5],[76,5],[78,5],[92,5],[93,6],[99,5],[102,6],[104,6],[107,5],[109,5],[110,5],[114,5],[116,6],[122,6],[131,6],[136,5],[139,6],[141,6],[147,6],[154,6],[163,6],[170,6],[176,5],[180,6],[185,5],[189,5],[196,5],[202,5],[204,6],[206,6],[209,6],[210,6],[213,6],[214,5],[223,6],[224,5],[226,6],[229,6],[240,6],[248,5],[251,5],[254,6],[263,5],[267,5],[270,5],[273,6],[274,5],[282,6],[284,5],[289,5],[294,6],[295,5],[298,5],[299,5],[302,6],[311,6],[315,6],[321,5],[333,5],[337,5],[348,6],[350,6],[359,5],[360,6],[361,6],[365,5],[366,5],[367,6],[369,5],[370,5],[371,6],[372,5],[374,5],[380,6],[384,6],[395,5],[396,6],[400,5],[402,5],[408,6],[421,5],[422,5],[423,5],[426,6],[439,5],[440,6],[446,6],[451,5],[452,6],[454,6],[459,5],[463,6],[465,5],[469,5],[478,5],[480,6],[481,6],[488,5],[490,6],[491,6],[493,5],[500,5],[508,5],[509,6],[517,6],[518,6],[520,5],[522,6],[523,6],[530,5],[538,5],[540,6],[541,6],[549,5],[567,5],[571,5],[573,6],[583,5],[586,6],[597,6],[602,5],[603,6],[611,5],[615,6],[631,5],[644,6],[655,5],[656,6],[664,5],[665,5],[673,6],[677,5],[685,5],[696,6],[697,5],[711,6],[723,5],[728,5],[729,6],[733,5],[737,5],[739,6],[742,6],[745,5],[746,5],[749,5],[761,5],[762,5],[770,5],[771,6],[773,6],[777,6],[778,6],[783,5],[786,5],[792,6],[794,6],[797,6],[798,6],[807,5],[808,5],[828,6],[837,6],[839,5],[840,5],[841,6],[844,5],[848,6],[851,6],[859,6],[863,6],[864,5],[868,5],[874,5],[880,5],[889,5],[892,6],[894,5],[898,5],[899,6],[902,5],[904,6],[912,6],[920,5],[924,5],[927,5],[931,6],[933,6],[934,6],[936,6],[941,6],[943,5],[948,5],[951,6],[956,6],[957,5],[960,6],[963,6],[965,5],[966,6],[973,5],[982,5],[990,5],[997,6],[1002,6],[1006,6],[1012,5],[1026,6],[1030,5],[1033,6],[1038,6],[1044,6],[1045,5],[1047,5],[1048,5],[1052,6],[1056,6],[1058,6],[1065,5],[1066,6],[1067,5],[1069,5],[1074,6],[1076,6],[1086,5],[1088,6],[1092,5],[1102,5],[1108,5],[1110,5],[1121,6],[1131,6],[1134,5],[1136,5],[1138,5],[1143,5],[1153,5],[1168,5],[1178,6],[1180,5],[1189,5],[1216,6],[1219,5],[1226,6],[1239,5],[1242,6],[1243,6],[1258,5],[1259,6],[1260,6],[1269,6],[1272,6],[1278,6],[1283,6],[1295,6],[1302,5],[1307,5],[1310,6],[1314,6],[1318,6],[1319,5],[1328,5],[1330,6],[1331,6],[1334,5],[1348,6],[1353,6],[1355,5],[1359,6],[1378,6],[1387,6],[1390,6],[1391,5],[1392,6],[1394,6],[1396,6],[1399,6],[1422,6],[1426,5],[1427,5],[1432,5],[1446,5],[1455,5],[1457,5],[1468,5],[1472,6],[1477,6],[1481,6],[1498,5],[1513,5],[1535,6],[1536,6],[1537,6],[1547,5],[1562,5],[1565,5],[1566,6],[1570,5],[1580,6],[1588,5],[1593,6],[1595,6],[1596,6],[1604,6],[1608,5],[1620,6],[1621,6],[1622,5],[1631,6],[1634,5],[1640,5],[1641,6],[1645,6],[1646,5],[1649,5],[1653,5],[1656,6],[1658,6],[1663,6],[1672,6],[1675,6],[1676,5],[1678,6],[1681,5],[1690,6],[1692,5],[1694,5],[1695,5],[1707,5],[1712,6],[1721,5],[1722,5],[1726,6],[1736,5],[1740,6],[1744,5],[1746,5],[1750,5],[1761,6],[1770,6],[1772,6],[1779,6],[1780,6],[1784,6],[1785,6],[1787,6],[1790,6],[1791,5],[1799,5],[1804,6],[1806,5],[1807,6],[1809,5],[1826,6],[1828,5],[1833,6],[1837,6],[1840,6],[1845,6],[1850,5],[1855,6],[1856,5],[1858,5],[1871,5],[1877,5],[1885,6],[1894,5],[1901,5],[1904,5],[1905,5],[1910,5],[1913,6],[1914,5],[1916,5],[1918,6],[1921,5],[1926,5],[1927,6],[1939,5],[1942,5],[1943,5],[1945,6],[1949,6],[1961,6],[1963,5],[1985,6],[1992,6],[1995,6],[1997,6],[2008,6],[2009,6],[2013,6],[2016,6],[2018,5],[2020,5],[2025,5],[2026,6],[2032,6],[2036,5],[2038,6],[2039,6],[2041,6],[2045,5],[2049,5],[2056,6],[2057,6],[2059,6],[2063,6],[2065,5],[2067,5],[2074,6],[2077,6],[2083,6],[2085,6],[2088,6],[2091,6],[2106,5],[2107,6],[2109,5],[2116,5],[2120,5],[2134,5],[2138,6],[2140,6],[2141,5],[2142,5],[2150,5],[2161,5],[2168,6],[2179,6],[2182,6],[2186,6],[2190,5],[2193,5],[2194,5],[2198,6],[2205,5],[2214,5],[2216,5],[2220,6],[2237,5],[2240,6],[2242,5],[2247,6],[2248,5],[2255,5],[2259,5],[2260,6],[2270,5],[2274,6],[2278,5],[2281,6],[2282,5],[2287,6],[2305,5],[2312,5],[2313,6],[2314,6],[2324,6],[2326,6],[2329,5],[2330,6],[2342,5],[2357,5],[2359,6],[2361,6],[2367,5],[2368,6],[2369,6],[2378,6],[2392,5],[2413,5],[2416,5],[2420,5],[2425,5],[2433,6],[2446,5],[2457,6],[2465,6],[2475,5],[2476,6],[2483,6],[2488,5],[2490,6],[2491,5],[2495,6]],[[10,6],[12,6],[27,5],[32,6],[34,6],[40,5],[41,6],[45,5],[46,6],[49,6],[53,6],[54,5],[56,5],[62,6],[63,6],[64,6],[65,5],[75,6],[78,5],[80,6],[85,6],[86,6],[92,5],[94,5],[97,5],[102,5],[107,5],[109,6],[110,5],[116,6],[122,6],[127,5],[134,5],[136,5],[140,6],[141,6],[142,5],[144,6],[154,6],[159,5],[162,6],[163,6],[164,6],[170,6],[174,5],[176,5],[180,5],[185,5],[196,5],[197,6],[204,6],[206,6],[208,5],[210,6],[214,5],[221,5],[223,6],[224,6],[226,6],[235,5],[236,6],[246,6],[251,6],[263,5],[265,6],[271,6],[274,5],[275,5],[289,5],[294,6],[295,5],[297,5],[311,6],[322,5],[329,5],[333,5],[337,5],[338,6],[344,5],[345,6],[348,6],[359,5],[360,6],[361,6],[366,5],[371,6],[372,6],[374,5],[380,6],[408,6],[410,6],[415,5],[421,5],[422,5],[442,5],[449,5],[451,6],[454,6],[460,5],[463,6],[465,5],[469,5],[471,6],[472,6],[474,6],[477,6],[481,6],[491,6],[492,5],[493,5],[497,5],[500,5],[509,6],[517,5],[522,6],[523,6],[527,6],[531,6],[533,6],[536,5],[537,6],[538,5],[541,6],[546,6],[571,6],[572,5],[573,6],[586,6],[587,5],[589,5],[596,6],[597,6],[601,6],[602,5],[607,5],[611,5],[612,5],[615,6],[624,6],[630,6],[631,5],[637,6],[640,6],[644,6],[649,5],[655,5],[657,5],[664,6],[665,5],[668,6],[670,5],[673,6],[696,6],[720,5],[723,5],[737,5],[738,6],[742,6],[743,6],[745,5],[755,6],[760,5],[761,5],[763,6],[772,6],[777,6],[778,6],[780,5],[782,5],[792,6],[795,5],[797,6],[798,6],[800,5],[802,6],[805,6],[821,5],[822,6],[839,5],[840,5],[841,6],[844,5],[845,5],[848,6],[852,5],[854,5],[862,6],[863,6],[867,5],[880,5],[884,5],[889,5],[892,6],[894,5],[908,6],[912,6],[920,6],[923,6],[924,5],[927,5],[934,6],[941,6],[953,5],[956,6],[957,6],[959,6],[963,6],[964,5],[965,5],[976,6],[981,6],[982,5],[990,5],[992,5],[997,6],[999,5],[1002,5],[1004,5],[1008,6],[1012,5],[1029,6],[1030,6],[1033,6],[1037,6],[1038,6],[1044,6],[1045,5],[1046,5],[1047,5],[1048,5],[1052,6],[1054,6],[1056,6],[1058,6],[1060,6],[1061,6],[1069,5],[1073,5],[1074,6],[1077,5],[1085,6],[1086,5],[1088,6],[1098,5],[1114,5],[1129,6],[1131,6],[1143,5],[1146,6],[1152,5],[1153,5],[1163,6],[1168,5],[1170,6],[1171,6],[1179,6],[1181,5],[1184,5],[1188,5],[1189,6],[1195,5],[1205,5],[1206,6],[1207,6],[1226,6],[1237,6],[1239,5],[1243,6],[1244,6],[1258,5],[1259,6],[1263,6],[1272,6],[1273,6],[1277,5],[1278,6],[1280,6],[1283,6],[1293,5],[1295,6],[1302,5],[1304,5],[1306,6],[1307,5],[1310,6],[1314,6],[1315,5],[1317,5],[1324,6],[1328,5],[1331,6],[1340,5],[1352,6],[1353,5],[1359,6],[1366,5],[1379,6],[1381,6],[1392,6],[1396,6],[1399,5],[1404,5],[1422,6],[1427,5],[1432,5],[1434,5],[1443,5],[1445,6],[1452,6],[1455,5],[1456,6],[1463,6],[1468,5],[1469,6],[1471,5],[1480,5],[1489,5],[1490,5],[1495,6],[1498,5],[1502,6],[1513,5],[1518,6],[1520,6],[1524,6],[1528,6],[1532,5],[1542,6],[1551,5],[1552,5],[1557,5],[1562,5],[1563,5],[1566,6],[1574,6],[1585,6],[1595,6],[1598,6],[1600,6],[1603,5],[1605,5],[1608,5],[1610,6],[1612,6],[1621,6],[1635,6],[1640,6],[1645,6],[1646,5],[1653,5],[1656,6],[1665,6],[1672,5],[1681,6],[1692,5],[1694,5],[1695,6],[1718,6],[1720,5],[1722,5],[1725,5],[1730,5],[1732,6],[1733,5],[1736,5],[1740,6],[1744,5],[1745,5],[1746,5],[1750,5],[1759,5],[1761,6],[1770,6],[1775,5],[1784,6],[1785,6],[1787,6],[1790,6],[1791,5],[1799,5],[1804,6],[1806,5],[1807,6],[1809,5],[1816,5],[1821,6],[1826,6],[1828,5],[1832,5],[1833,6],[1836,5],[1837,6],[1838,6],[1839,6],[1840,6],[1850,5],[1856,5],[1879,6],[1883,5],[1885,6],[1887,6],[1888,5],[1894,5],[1900,6],[1905,6],[1913,6],[1914,5],[1918,6],[1924,5],[1925,6],[1926,5],[1939,6],[1940,6],[1942,5],[1950,5],[1956,6],[1957,5],[1961,6],[1967,5],[1971,6],[1976,6],[1977,6],[1985,6],[1988,6],[1995,6],[2002,5],[2006,5],[2009,6],[2011,5],[2012,5],[2018,5],[2020,5],[2025,6],[2026,6],[2032,6],[2036,5],[2037,5],[2045,5],[2056,6],[2057,6],[2070,5],[2073,5],[2074,6],[2080,5],[2083,6],[2103,5],[2106,5],[2107,6],[2109,5],[2111,6],[2116,5],[2120,5],[2129,5],[2141,5],[2150,6],[2158,6],[2161,5],[2179,6],[2181,5],[2182,6],[2186,6],[2190,5],[2193,6],[2194,5],[2198,6],[2200,5],[2204,6],[2205,5],[2210,5],[2211,6],[2214,5],[2217,5],[2221,6],[2226,5],[2232,5],[2244,6],[2246,6],[2247,6],[2248,5],[2255,5],[2257,6],[2260,6],[2265,6],[2274,6],[2281,5],[2293,5],[2311,5],[2312,5],[2314,6],[2339,6],[2347,5],[2357,5],[2359,6],[2361,6],[2362,5],[2367,6],[2368,6],[2372,5],[2378,6],[2384,6],[2392,6],[2395,6],[2413,5],[2414,5],[2416,5],[2425,5],[2429,5],[2431,5],[2433,6],[2434,6],[2441,5],[2446,5],[2449,6],[2450,6],[2452,6],[2457,5],[2461,5],[2466,6],[2471,6],[2480,6],[2483,6],[2490,6],[2503,6],[2504,6],[2512,6],[2520,6],[2523,5],[2541,6],[2552,5],[2555,5],[2566,5],[2568,5],[2572,5],[2578,5],[2580,6],[2581,5],[2587,5],[2592,6],[2593,6],[2595,6],[2599,5],[2602,6],[2609,5],[2614,5],[2620,5],[2623,5],[2631,5],[2639,6],[2642,5],[2647,6],[2648,6],[2658,5],[2659,5],[2667,6],[2680,6],[2685,6],[2689,6],[2694,6],[2702,5],[2709,6],[2714,5],[2724,5],[2728,5],[2729,6],[2747,6],[2751,5],[2754,6],[2764,5],[2767,5],[2772,6],[2782,6],[2784,5],[2798,5],[2799,5],[2802,6],[2805,5],[2815,6],[2827,6],[2832,6],[2833,5],[2834,5],[2850,6],[2852,6],[2859,5],[2860,6],[2865,5],[2867,6],[2869,5],[2870,5],[2872,5],[2884,5],[2894,6],[2895,5],[2896,6],[2900,5],[2906,5],[2910,5],[2918,5],[2920,5],[2923,5],[2940,6],[2943,6],[2946,6],[2950,5],[2952,6],[2956,6],[2958,6],[2959,5],[2965,6],[2978,5],[2980,6],[2981,5],[2988,5],[3008,5],[3012,6],[3017,6],[3019,6],[3020,5],[3023,5],[3027,6],[3030,5],[3032,6],[3034,6],[3038,5],[3040,6],[3054,6],[3055,6],[3064,5],[3066,6],[3070,6],[3078,6],[3086,5],[3095,6],[3101,6],[3103,6],[3112,5],[3116,6],[3118,6],[3123,6],[3128,5],[3134,5],[3148,6],[3152,5],[3156,6],[3161,5],[3177,5],[3178,5],[3182,6],[3185,5],[3191,5],[3202,6],[3212,6],[3214,6],[3231,5],[3233,5],[3240,6],[3241,5],[3242,6],[3249,5],[3253,6],[3256,5],[3260,5],[3270,5],[3271,6],[3276,6],[3277,6],[3279,5],[3282,5],[3283,5],[3287,6],[3294,6],[3307,5],[3308,5],[3312,6],[3316,6],[3329,5],[3336,5],[3337,6],[3340,5],[3341,6],[3347,6],[3351,6],[3356,6],[3363,5],[3364,5],[3368,5],[3375,6],[3398,5],[3399,6],[3404,6],[3417,5],[3420,5],[3433,6],[3435,6],[3436,6],[3448,5],[3451,6],[3457,5],[3458,6],[3466,6],[3467,6],[3468,6],[3473,5],[3475,5],[3480,6],[3488,5],[3490,6],[3502,6],[3506,6],[3512,5],[3519,6],[3530,5],[3536,6],[3549,6],[3551,5],[3564,6],[3566,6],[3568,6],[3574,6],[3575,5],[3576,6],[3586,5],[3591,6],[3592,5],[3608,5],[3610,5],[3618,6],[3623,5],[3626,6],[3627,6],[3631,6],[3632,6],[3634,5],[3636,5],[3638,5],[3643,6],[3654,5],[3664,6],[3678,6],[3679,6],[3689,5],[3690,6],[3705,6],[3715,6],[3716,6],[3718,6],[3719,5],[3742,6],[3753,6],[3760,6],[3765,5],[3769,6],[3773,5],[3778,6],[3780,6],[3805,6],[3808,5],[3815,5],[3817,5],[3819,5],[3828,5],[3830,6],[3834,5],[3846,5],[3848,6],[3849,6],[3853,6],[3855,5],[3861,6],[3865,6],[3870,6],[3877,5],[3890,6],[3899,6],[3900,6],[3909,6],[3915,6],[3932,5],[3935,6],[3938,5],[3945,5],[3946,6],[3964,5],[3969,6],[3972,6],[3977,6],[3998,6],[4000,6],[4005,5],[4022,5],[4023,5],[4033,5],[4035,6],[4037,6],[4038,5],[4046,5],[4047,5],[4056,5],[4060,6],[4065,5],[4070,5],[4080,6],[4081,5],[4086,5],[4093,6],[4096,6],[4099,6],[4104,6],[4106,5],[4117,6],[4120,6],[4122,5],[4131,6],[4134,5],[4135,6],[4140,5],[4141,6],[4146,5],[4149,6],[4151,5],[4153,5],[4158,6],[4163,6],[4168,5],[4172,6],[4175,6],[4176,5],[4177,5],[4178,6],[4180,6],[4181,5],[4182,6],[4188,5],[4190,6],[4192,6],[4193,5],[4204,6],[4206,5],[4207,5],[4208,5],[4212,6],[4216,5],[4221,5],[4226,6],[4245,5],[4248,5],[4250,6],[4259,6],[4260,6],[4262,5],[4264,6],[4268,5],[4278,5],[4279,6],[4280,6],[4282,6],[4295,5],[4301,5],[4302,5],[4304,5],[4309,6],[4314,5],[4330,5],[4333,5],[4342,6],[4345,6],[4351,5],[4355,6],[4358,5],[4360,6],[4363,6],[4371,5],[4377,5],[4401,5],[4402,6],[4403,5],[4404,5],[4414,5],[4416,5],[4419,6],[4421,5],[4426,6],[4427,6],[4434,6],[4439,5],[4444,6],[4445,6],[4448,6],[4449,6],[4455,6],[4462,5],[4464,6],[4475,6],[4478,5],[4492,6],[4497,6],[4502,5],[4504,5],[4505,5],[4508,6],[4509,6],[4516,6],[4525,5],[4533,5],[4538,6],[4539,6],[4541,5],[4543,5],[4544,6],[4559,6],[4565,5],[4566,6],[4567,5],[4568,5],[4573,5],[4577,6],[4585,6],[4592,6],[4596,6],[4609,5],[4611,5],[4620,6],[4622,5],[4634,5],[4635,5],[4638,6],[4640,6],[4642,5],[4647,6],[4650,6],[4653,5],[4657,6],[4661,5],[4674,6],[4682,5],[4693,5],[4697,5],[4700,5],[4705,5],[4716,5],[4720,6],[4725,5],[4730,6],[4731,6],[4740,6],[4742,5],[4755,6],[4759,5],[4769,5],[4770,5],[4776,5],[4778,5],[4781,6],[4782,5],[4787,6],[4789,5],[4795,6],[4805,5],[4810,6],[4819,6],[4826,6],[4827,6],[4829,5],[4830,6],[4831,6],[4837,6],[4841,5],[4856,6],[4867,5],[4869,6],[4877,5],[4879,5],[4886,6],[4892,5],[4896,5],[4901,5],[4914,5],[4920,5],[4929,5],[4930,5],[4933,6],[4935,5],[4936,5],[4940,6],[4951,6],[4953,5],[4956,5],[4957,6],[4963,5],[4965,6],[4968,6],[4976,6],[4978,5],[4983,6],[4984,6],[4986,5],[4988,5],[4990,6],[4991,5],[4993,5]]]
    admin = AdminController(model, DBSession, config_type=TGAdminConfig)
    Building_Price=[[1000,0,100,0,0],[500,10,0,1,600],[1000,30,0,1,1200],[1500,60,0,1,1800],[1000,60,0,1,1800],[1500,100,0,1,2400],[2000,200,0,1,3000],[2000,200,0,2,3600],[2500,300,0,2,4200],[3000,400,0,2,4800],[3000,400,0,2,5400],[3500,500,0,2,6000],[4000,600,0,2,6600],[4000,600,0,3,7200],[5000,700,0,3,7800],[6000,800,0,3,8400],[-10,0,0,3,10800],[-15,0,0,3,11400],[-20,0,0,3,12000],[5000,150,150,1,3600],[15000,300,20,2,7200],[50000,600,50,3,14400],[100,20,20,1,600],[300,30,5,1,1800],[500,50,10,1,3600],[600,30,20,1,1800],[750,50,5,1,3600],[900,70,5,1,5400],[1200,50,40,2,3600],[1400,70,5,2,5400],[1600,100,5,2,7200],[1800,100,70,2,5400],[2100,130,5,2,7200],[2400,150,5,2,9000],[2400,130,90,3,7200],[2800,150,5,3,9000],[3200,170,5,3,10800],[7200,150,110,3,10800],[10200,170,5,3,12600],[13200,200,5,3,14400],[-5,0,0,4,14400],[-10,0,0,4,16200],[-15,0,0,4,18000],[-10,0,0,4,18000],[-15,0,0,4,19800],[-20,0,0,4,21600],[-15,0,0,1,18000],[-20,0,0,1,19800],[-25,0,0,1,21600],[10000,200,0,1,7200],[10000,200,0,1,7200],[10000,200,0,1,7200],[10000,200,0,1,7200],[20000,300,0,10,21600],[20000,300,0,10,21600],[20000,300,0,10,21600],[20000,300,0,10,21600],[50000,500,0,20,43200],[50000,500,0,20,43200],[50000,500,0,20,43200],[50000,500,0,20,43200]]#corn,food,labor_num,cae 0:nongtian 1-18:minju 19-21:bingying 22-shangye
    housebuild=[[500,10,0,0,3,600,None],[3000,30,0,5,5,1200,'e,1'],[6000,0,70,7,7,2400,'a,2;b,2'],[1500,60,0,0,5,1800,None],[9000,120,0,6,7,3600,'b,1;c,1'],[15000,0,100,8,9,7200,'c,2;d,2'],[4000,200,0,0,7,4320,None],[11000,0,120,7,9,8400,'a,2;c,2'],[13000,0,-120,9,11,14400,'d2,e3'],[8000,400,0,0,9,9360,None],[15000,0,150,150,8,11,19800,'b,2;d,2'],[17000,0,-150,10,13,36000,'c,2;e,3'],[12000,600,0,0,11,14400,None],[18000,0,200,9,13,28800,'a,2;d,2'],[20000,0,-200,11,15,43200,'b,3;e,2'],[-10,0,0,0,15,19800,None],[20000,0,300,15,20,36000,'e,3'],[25000,0,-300,20,25,43920,'e,5']]#corn,food,resource(+:m -:s),cae,exp,time
    resourcebuild=[[1000,0,100,0,5],[-10,0,0,0,50],[-20,0,0,0,100],[-30,0,0,0,150],[10000,600,200,0,20],[28500,1200,400,200,30]]#corn,food,labor_num,wood,exps
    milbuild=[[4000,150,150,0,0,5,3600,None],[9000,0,20,200,15,10,10800,'f,1;g,1'],[20000,0,50,-200,20,15,21600,'g,2;h,2'],[12000,750,150,0,0,5,7200,None],[25000,0,20,500,15,10,14400,'h,1;i,1'],[50000,0,50,-500,20,15,28800,'i,2;g,3'],[6000,300,150,0,0,5,10800,None],[12000,0,20,300,15,10,21600,'f,1;i,1'],[25000,0,50,-300,20,15,32400,'f,2;h,3']]#corn,food,labor_num,resource,update(cae),exp,time
    businessbuild=[[300,20,20,0,0,3,600,None],[1300,30,5,0,6,5,1800,'j,1;k,1'],[2600,0,0,70,8,7,3600,'m,2;n,3'],[1200,30,40,0,0,5,3600,None],[1500,50,10,100,7,7,8640,'k,1;m,1'],[3000,70,15,-100,9,9,14400,'n,2;l,3'],[-5,0,0,0,0,15,7920,None],[5000,0,0,120,10,20,14400,'m,1;n,1'],[7000,0,0,-120,15,25,23400,'l,2;j,2'],[2000,50,50,0,0,7,12240,None],[2500,0,15,150,8,9,18000,'n,1;l,1'],[4000,0,20,-150,10,11,25920,'n,2;d,3'],[5000,100,70,0,0,9,14400,None],[7000,0,20,170,9,11,22320,'j,1;a,1'],[14000,0,25,-170,11,13,32800,'k,2;c,3'],[-10,0,0,0,0,25,20520,None],[9000,130,0,200,15,30,25200,'k,1;b,1'],[11000,170,0,-200,20,35,33120,'m,2;d,3'],[7200,130,90,0,0,11,21600,None],[11000,150,25,210,10,28800,'m,1;c,1'],[20000,170,30,-210,12,15,36720,'n,2;e,3'],[8000,150,110,0,0,13,25920,None],[13000,170,30,230,11,15,34200,'n,1;d,1'],[21000,200,35,-230,13,17,39600,'l,2;f,3'],[-15,0,0,0,0,35,28800,None],[13000,160,0,250,20,40,37440,'l,1;e,1'],[17000,200,0,-250,25,45,43200,'b,2;f,3']]#corn,food,labor,resource,update(cae),exp,time
    godbuild=[[10000,200,0,50,500,7200],[10000,200,0,50,500,7200],[10000,200,0,50,500,7200],[10000,200,0,50,500,7200],[20000,300,10,100,1000,21600],[20000,300,10,100,1000,21600],[20000,300,10,100,1000,21600],[20000,300,10,100,1000,21600],[50000,500,20,300,2000,43200],[50000,500,20,300,2000,43200],[50000,500,20,300,2000,43200],[50000,500,20,300,2000,43200]]# corn,food,cae,exp,populationupbound
    decorationbuild=[[-1,5],[50,1],[-2,10],[-3,15],[100,5],[150,5],[200,5],[250,5],[300,5],[350,5],[1000,20],[100,20],[1000,20],[-10,100],[-5,100],[800,10],[1300,25],[1400,25],[1500,25],[2000,50],[-8,70],[3000,40],[3200,40],[3400,40],[3600,40],[2500,30],[2600,30],[2700,30],[-3,80],[-4,80],[-5,80],[-6,80],[4000,50],[4300,50],[4600,50],[900,15],[-20,300],[8000,100],[50,10],[50,10],[50,10],[50,10]]#corn(or cae),populationupbound
    Plant_Price=[[50,0,1,600],[165,0,1,1800],[-1,0,1,3600],[700,0,1,7200],[1440,0,1,14400],[-2,0,2,21600],[203,0,2,1200],[400,0,2,2400],[-4,0,2,10800],[1210,0,3,7200],[3000,0,3,18000],[-8,0,3,28800]]#corn,food,cae
    production=[]#not decided for now
    increasefood=[[1,30],[1,80],[1,160],[5,200],[3,300],[3,370],[3,410],[10,550],[5,520],[5,610],[5,720],[15,1000]]#exp,food
    increasebuild=[[3,0],[1,0],[2,0],[3,0],[2,0],[3,0],[4,0],[3,0],[4,0],[5,0],[4,0],[5,0],[6,0],[7,0],[8,0],[9,0],[10,0],[15,0],[20,0],[5,0],[10,0],[15,0],[1,0],[2,0],[3,0],[2,0],[3,0],[4,0],[3,0],[4,0],[5,0],[4,0],[5,0],[6,0],[5,0],[6,0],[7,0],[6,0],[7,0],[8,0],[10,0],[15,0],[20,0],[15,0],[20,0],[25,0],[15,0],[20,0],[25,0],[50,500],[50,500],[50,500],[50,500],[100,1000],[100,1000],[100,1000],[100,1000],[300,2000],[300,2000],[300,2000],[300,2000]]#exp,population
    increaseheishi=[[50,10],[100,10],[200,10]]#exp,battlepopulation
    beginTime=(2011,1,1,0,0,0,0,0,0)
    houses=[[20,40,1,1800,1],[40,80,3,1800,1],[60,120,5,1800,1],[75,150,3,7200,2],[95,190,5,7200,2],[115,230,7,7200,2],[105,210,5,10800,2],[125,250,7,10800,2],[150,300,9,10800,2],[135,270,7,14400,2],[155,310,9,14400,3],[180,360,11,14400,3],[190,380,9,18000,3],[210,420,11,18000,3],[230,460,13,18000,3],[280,500,15,3600,4],[400,600,20,3600,4],[500,700,25,3600,4]]#population,food,exp got,cae 
    soldie=[[1200,60,20,3,7200],[3100,155,60,3,21600],[6200,310,120,3,43200],[2400,120,20,3,7200],[6200,310,60,3,21600],[12400,620,120,3,43200],[3600,180,20,3,7200],[9300,540,60,3,21600],[18600,930,120,3,43200],[7600,240,60,6,7200],[10800,360,90,6,21600],[21600,720,180,6,43200],[15200,480,60,6,7200],[21600,720,90,6,21600],[43200,1440,180,6,43200],[22800,960,60,6,7200],[32400,1440,90,6,21600],[64800,2880,180,6,43200],[800,10,2,9,7200],[2100,30,5,9,21600],[4200,60,10,9,43200],[1000,20,2,9,7200],[2700,60,5,9,21600],[5400,120,10,9,43200],[1200,40,2,9,7200],[3300,120,5,9,21600],[6600,240,10,9,43200]]#corn,food,labor_num,cae
    soldiernum=[15,15,15,30,30,30,60,60,60,40,40,40,80,80,80,160,160,160,10,10,10,15,15,15,20,20,20]#soldier exp
    production=[[100,1,1,600],[200,2,1,600],[300,3,1,600],[250,2,1,1800],[500,3,1,1800],[750,4,1,1800],[5600,10,2,28800],[9000,15,2,28800],[12400,20,2,28800],[500,3,1,3600],[1000,4,1,3600],[1500,5,1,3600],[1100,4,2,7200],[2200,5,2,7200],[3300,6,2,7200],[6500,15,3,36000],[10000,20,3,36000],[13500,25,3,36000],[2100,5,2,14400],[4200,6,2,14400],[6300,7,2,14400],[3000,6,3,21600],[6000,7,3,21600],[9000,8,3,21600],[8000,20,12,43200],[15000,25,12,43200],[20000,30,12,43200]]#corn that the plant can produce for a cycle,production,exp,speedup cae ground_id-22
    error = ErrorController()
    mapKind=[20,50,100,300,500,1000]
    @expose('json')
    def newtbox(user_id,num):
        u=DBSession.query(operationalData).filter_by(userid=int(user_id)).one()
        u.num=int(num)
        u.treasurebox=''
        return dict(id=1)
    @expose('json')
    def helpopen(user_id,fuser_id):
        u1=DBSession.query(operationalData).filter_by(userid=int(user_id)).one()
        u2=DBSession.query(operationalData).filter_by(userid=int(fuser_id)).one()
        papayaid1=u1.otherid
        if u2.treasurebox!='':
            s=(u2.treasurebox).split(';')
            length=len(s)
            if s<u2.num:
                u2.treasurebox=u2.treasurebox+';'+str(papayaid1)
                return dict(id=1)
            else:
                return dict(id=0)
        else:
            u2.treasurebox=str(papayaid1)
            return dict(id=1)
    @expose('json')
    def selfopen(user_id,cae):
        u=DBSession.query(operationalData).filter_by(userid=int(user_id)).one()
        if u.cae-int(cae)>=0:
            if u.treasurebox!='':
                u.treasurebox=u.treasurebox+';'+str(0-int(cae))
                u.cae=u.cae-int(cae)
                return dict(id=1)
            else:
                u.treasurebox=str(0-int(cae))
                return dict(id=1)
        else:
            return dict(id=0)
    @expose('json')
    def completeopen(user_id):
        u.num=-1
        u.treasurebox=''
        return dict(id=1)
    def specialgoods(ground_id,str,u):
        str='111'
        stru=u.specialgoods
        num1=[]
        num2=[]
        if stru==None:
            return True
        struset=stru.split(';')
        if struset!=None:
            for su in struset:
                suset=su.split(',')
                
                type=suset[0]
                ac=suset[1]
                num1.append([type,ac])
            if ground_id>=100 and ground_id<=199:
                str=housebuild[ground_id-100][6]
            elif ground_id>=200 and ground_id<=299:
                str=milbuild[ground_id-200][7]
            elif ground_id>=300 and ground_id<=399:
                str=businessbuild[ground_id-300][7]
            else:
                return True
            if str=='111':
                return True
            else:
                if str==None:
                    return True
                strset=str.split(';')
                for ss in strset:
                    ssset=ss.split(',')
                    num2.append(sset[0],sset[1])
                for x in num2:
                    for y in num1:
                        if y[0]==x[0]:
                            if int(x[1])-int(y[1])>=0:
                                y[1]=str(int(x[1])-int(y[1]))
                            else:
                                return False
                strre=' '
                mark=0
                for y in num1:
                    tempstr=y[0]+','+y[1]
                    if mark==0:
                        strre=strre+tempstr
                        mark=1
                    else:
                        strre=strre+';'+tempstr
                u.specialgoods=strre
                return True
        else:
            return True
    def getGround_id(ground_id):
        castle=[[-1,-1]]
        error=[[-2,-2]]
        if ground_id==0:
            return None#castle
        elif ground_id>=1 and ground_id<=99:#resource
            return resourcebuild[ground_id-1]
        elif ground_id>=100 and ground_id<=199:#house
            return housebuild[ground_id-100]
        elif ground_id>=200 and ground_id<=299:#military
            return milbuild[ground_id-200]
        elif ground_id>=300 and ground_id<=399:#business
            return businessbuild[ground_id-300]
        elif ground_id>=400 and ground_id<=499:#god
            return godbuild[ground_id-400]
        elif ground_id>=500 and ground_id<=699:#decoration
            return decorationbuild[ground_id-500]
        else:
            return None
    @expose('json')
    def getfriend(self,papaya):
        try:
            u=DBSession.query(operationalData).filter_by(otherid=int(papaya)).one()
            city_id=DBSession.query(warMap).filter_by(userid=u.userid).one()
            read=DBSession.query(businessRead).filter_by(city_id=city_id).one()
            readstr=read.layout
            return dict(str=readstr,friends=u.treasurebox)
        except InvalidRequestError:
            return dict(id=0)
    @expose('json')
    def sell(self,user_id,city_id,grid_id):
        try:
            u=DBSession.query(operationalData).filter_by(userid=int(user_id)).one()
            p=DBSession.query(businessWrite).filter_by(city_id=int(city_id)).filter_by(grid_id=int(grid_id)).one()
            lis=getGround_id(p.ground_id)
            if lis==None:
                return dict(id=-1)
            else:
                if p.ground_id>=1 and p.ground_id<=99:
                    u.labor_num=u.labor_num-lis[2]
                elif p.ground_id>=200 and p.ground_id<=299:
                    u.labor_num=u.labor_num-lis[2]
                elif p.ground_id>=300 and p.ground_id<399:
                    u.labor_num=u.labor_num-lis[2]		            
                if lis[0]>0:
                    u.corn=u.corn+lis[0]/4
                else:
                    u.corn=u.corn+500
                p.ground_id=-1
                p.producttime=0
                p.object_id=-1
                p.finish=0
                read(city_id)
                return  dict(id=1)
        except InvalidRequestError:
            return dict(id=0)   
    def makeMap(kind):
        newMap=Map(map_kind=kind,num=0)
        DBSession.add(newMap)
        c1=DBSession.query('LAST_INSERT_ID()')
        return c1[0]
    def insert(mapid):
        try:
            c=DBSession.query(Map).filter_by(mapid=mapid).one()
            c.num=c.num+1
            return c.num
        except InvalidRequestError:
            return -1
    def getMap(kind):
        try:
            c=DBSession.query(Map).filter_by(map_kind=kind)
            if c!=None :
                for m in c:
                    if m.num<mapKind[kind]:
                        cm=[insert(m.mapid),m.mapid]
                        return cm
            return [0,0]
        except InvalidRequestError:
            return [0,0]       
    def upd(oldmapid,kind):
        try:
            c=DBSession.query(Map).filter_by(mapid=oldmapid).one()
            c.num=c.num-1
            i=getMap(kind)
            if i[0]>0:
                return i
            else:
                cid=makeMap(kind)
                i=insert(cid[0])
                return [i,cid[0]]
        except InvalidRequestError:
            return [0,0]
    def read(city_id):
        try:
            s=' '
            i=0
            cid=int(city_id)
            cset=DBSession.query(businessWrite).filter_by(city_id=cid)
            for c in cset:
                if i==0:
                    s=s+str(c.ground_id)+','+str(c.grid_id)+','+str(c.object_id)+','+str(c.producttime)+','+str(c.finish)
                    i=1
                else :
                    s=s+';'+str(c.ground_id)+','+str(c.grid_id)+','+str(c.object_id)+','+str(c.producttime)+','+str(c.finish)
            try:
                cc=DBSession.query(businessRead).filter_by(city_id=cid).one()
                #return dict(id=3,s=cc.layout)
                cc.layout=s
                return 1
            except InvalidRequestError:
                newread=businessRead(city_id=cid,layout=s)
                DBSession.add(newread)
                return 2
        except InvalidRequestError:
            return 0
    @expose('json')
    def logsign(self,papayaid):
        try:
            oid=int(papayaid)
            user=DBSession.query(operationalData).filter_by(otherid=oid).one()
            s=DBSession.query(warMap).filter_by(userid=user.userid).one()
            st=DBSession.query(businessRead).filter_by(city_id=s.city_id).one()
            stt=st.layout
            corn=user.corn
            cae=user.cae
            population=user.population
            labor_num=user.labor_num
            exp=user.exp
            fo=user.food
        except InvalidRequestError:
            newuser=operationalData(labor_num=0,population=0,exp=0,corn=0,cae=0,nobility=0,infantry_num=0,cavalry_num=0,scout_num=0,person_god=0,wealth_god=0,food_god=0,war_god=0,user_kind=0,otherid=oid,lev=0,empirename='MyEmpire',food=0)
            DBSession.add(newuser)
            c1=DBSession.query('LAST_INSERT_ID()')
            c1=c1[0]
            gi=0
            mi=0
            mid=getMap(0)
            if mid[0]!=0:
                nwMap=warMap(c1[0],mid[1],twenty[mid[0]-1][0],0)
                DBSession.add(nwMap)
                gi=twenty[mid[0]-1][0]
                mi=mid[1]
            else:
                mid=makeMap(0)
                num=insert(mid[0])
                #return dict(id=num[0],mid=mid,num=num[1])
                i=twenty[num-1][0]
             #   return dict(c1=c1[0],mid=mid,i=i)
                nwMap=warMap(c1[0],mid[0],i,0)
                gi=i
                mi=mid[0]
                DBSession.add(nwMap)
            cid=DBSession.query('LAST_INSERT_ID()')
           # newaccount=userAccount(userid=c1[0],otherid=oid)
           # DBSession.add(newaccount)
            return dict(id=c1[0],city_id=cid[0],mapid=mi,gridid=gi,corn=corn,cae=cae,population=population,labor_num=labor_num,exp=exp,food=fo,time=int(time.mktime(time.localtime())-time.mktime(beginTime)))
        return dict(id=user.userid,stri=stt,time=int(time.mktime(time.localtime())-time.mktime(beginTime)),exp=user.exp,corn=user.corn,cae=user.cae,map_id=s.mapid,city_id=s.city_id)
    @expose('json')
    def update(self,userid):
        try:
            u=DBSession.query(operationalData).filter_by(userid=int(userid)).one()
            
            p=DBSession.query(warMap).filter_by(userid=int(userid)).one()
            c=upd(p.mapid,u.lev+1)
            u.lev=u.lev+1
            p.gridid=ob[u.lev][c[0]-1][0]
            p.mapid=c[1]
            p.map_kind=p.map_kind+1
            return dict(mapid=p.mapid,gridid=p.gridid)
        except InvalidRequestError:
            return dict(id=0)
    @expose('json')
    def updateStatues(self,user_id,city_id,ground_id,grid_id,type):
        try:
            p=DBSession.query(businessWrite).filter_by(city_id=int(city_id)).filter_by(grid_id=int(grid_id)).one()
            u=DBSession.query(operationalData).filter_by(userid=int(userid)).one()
            if int(type)==0:
                corn=godbuild[int(ground_id)-400][0]
                food=godbuild[int(ground_id)-400][1]
                if u.corn-corn>=0 and u.food-food>=0 and p.producttime==0:
                    p.finish=0
                    p.ground_id=int(ground_id)
                    ti=int(time.mktime(time.localtime())-time.mktime(time.beginTime))
                    p.producttime=ti
                    read(city_id)
                    return dict(id=1)
                else:
                    return dict(id=0)
            else:
                cae=godbuild[int(ground_id)][2]
                if u.cae-cae>=0 and p.producttime==0:
                    p.finish=0
                    p.ground_id=int(ground_id)
                    ti=int(time.mktime(time.localtime())-time.mktime(time.beginTime))
                    p.producttime=ti
                    read(city_id)
                    return dict(id=1)
                else:
                    return dict(id=0)
        except InvalidRequestError:
            return dict(id=0)
    @expose('json')
    def move(self,movestring):
        try:
            strset=movestring.split(':')
            city_id=strset[0]
            move=strset[1]
            strset2=move.split(';')
            src=[]
            dst=[]
            i=0
            for s in strset2 :
                strset3=s.split(',')
                former=int(strset3[0])
                latter=int(strset3[1])
              
                p=DBSession.query(businessWrite).filter_by(city_id=int(city_id)).filter_by(grid_id=former).one()
                p.grid_id=-1-p.grid_id
                src.append(p)
                try:
                    p1=DBSession.query(businessWrite).filter_by(city_id=int(city_id)).filter_by(grid_id=latter).one()
                    if p1.ground_id==-1:
                        DBSession.delete(p1)
                     
                    dst.append(p1.grid_id)
               
                except InvalidRequestError:
                    dst.append(latter)
                i=i+1
            k=0
            while k<i:
                src[k].grid_id=dst[k]
                k=k+1    
            read(city_id)
            return dict(id=1)
        except InvalidRequestError:
            return dict(id=0,city_id=city_id,former=former,latter=latter,i=i)
    @expose('json')
    def gUpdC(self,user_id,city_id,grid_id):
        try:
            p=DBSession.query(businessWrite).filter_by(city_id=int(city_id)).filter_by(grid_id=int(grid_id)).one()
            u=DBSession.query(operationalData).filter_by(userid=int(userid)).one()
            p.finish=1
            p.producttime=0
            u.populationupbound=u.populationupbound+godbuild[p.ground_id-400][4]
            u.exp=u.exp+godbuild[p.ground_id-400][3]
            read(city_id)
            return dict(id=1)
        except InvalidRequestError:
            return dict(id=0)
    @expose('json')
    def build(self,user_id,city_id,ground_id,grid_id):
        i=0
        price=0
        pricefood=0
        pop=0
        stone=0
        wood=0
        try:
            ca=0
            price=0
            pricefood=0
            pop=0
            ground_id=int(ground_id)
            stone=0
            wood=0
            lis=getGround_id(int(ground_id))
            if lis[0]==None:
                return dict(id=-3)
            u=DBSession.query(operationalData).filter_by(userid=int(user_id)).one()
            p=DBSession.query(businessWrite).filter_by(city_id=int(city_id)).filter_by(grid_id=int(grid_id)).one()
            ptime=p.producttime
            price=lis[0]
            ti=int(time.mktime(time.localtime())-time.mktime(beginTime))
            if ground_id>=1 and ground_id<=499:
                pricefood=lis[1]
            if ground_id >=1 and ground_id<=99:
                pop=lis[2]
            elif ground_id>=200 and ground_id<399:
                pop=lis[2]
            if ground_id>=1 and ground_id<=99:
                wood=lis[3]
            elif ground_id>=100 and ground_id<=199:
                if lis[2]>0:
                    wood=lis[2]
                else:
                    stone=-lis[2]
            elif ground_id>=200 and ground_id<=299:
                if lis[3]>0:
                    wood=lis[3]
                else:
                    stone=-lis[3]
            elif ground_id>=300 and ground_id<=399:
                if lis[3]>0:
                    wood=lis[3]
                else:
                    stone=-lis[3]        
            if price>=0:
                if u.corn-price>=0 and u.food-pricefood>=0 and u.labor_num+pop<=u.population and u.wood-wood>=0 and u.stone-stone>=0 and ptime==0 and specialgoods(int(ground_id),u.specialgoods,u)==True:
                    u.corn=u.corn-price
                    u.stone=u.stone-stone
                    u.wood=u.wood-wood
                    u.food=u.food-pricefood
                    u.labor_num=u.labor_num+pop
                    p.finish=0
                    if ground_id>=1 and ground_id<=99:
                        p.finish=1
                        p.producttime=0
                        u.exp=u.exp+lis[4]
                    elif ground_id>=500 and ground_id<=699:
                        p.finish=1
                        p.producttime=0
                        u.populationupbound=u.populationupbound+lis[1]
                    else:
                        p.producttime=ti
                    p.ground_id=int(ground_id)
                    read(city_id)
                    return dict(id=1)
                else:
                    return dict(id=0)
            else:
                if u.cae+price>=0 and u.food-pricefood>=0 and u.labor_num+pop<=u.population and u.wood-wood>=0 and u.stone-stone>=0 and ptime==0 and specialgoods(int(ground_id),u.specialgoods,u)==True:
                    u.cae=u.cae+price
                    u.food=u.food-pricefood
                    u.labor_num=u.labor_num+pop
                    u.wood=u.wood-wood
                    u.stone=u.stone-stone
                    p.finish=0
                    if ground_id>=1 and ground_id<=99:
                        p.finish=1
                        p.producttime=0
                        u.exp=u.exp+lis[4]
                    elif ground_id>=500 and ground_id<=699:
                        p.finish=1
                        p.producttime=0
                        u.populationupbound=u.populationupbound+lis[1]
                    else:
                        p.producttime=ti
                    p.producttime=ti
                    p.ground_id=int(ground_id)
                    read(city_id)
                    return dict(id=1)
                else:
                    return dict(id=0)
        except InvalidRequestError:
            u=DBSession.query(operationalData).filter_by(userid=int(user_id)).one()
            ground_id=int(ground_id)
            lis=getGround_id(int(ground_id))
            if lis[0]==None:
                return dict(id=-3)
            ti=int(time.mktime(time.localtime())-time.mktime(beginTime))
            if ground_id>=1 and ground_id<=499:
                pricefood=lis[1]
            if ground_id >=1 and ground_id<=99:
                pop=lis[2]
            elif ground_id>=200 and ground_id<399:
                pop=lis[2]
            if ground_id>=1 and ground_id<=99:
                wood=lis[3]
            elif ground_id>=100 and ground_id<=199:
                if lis[3]!=0:
                    return dict(id='can not update')
                if lis[2]>0:
                    wood=lis[2]
                else:
                    stone=-lis[2]
            elif ground_id>=200 and ground_id<=299:
                if lis[4]!=0:
                    return dict(id='can not  update')
                if lis[3]>0:
                    wood=lis[3]
                else:
                    stone=-lis[3]
            elif ground_id>=300 and ground_id<=399:
                if lis[4]!=0:
                    return dict(id='can not update')
                if lis[3]>0:
                    wood=lis[3]
                else:
                    stone=-lis[3]
            newbuilding=None
            if ground_id>=1 and ground_id<=99:
                newbuilding=businessWrite(city_id=int(city_id),ground_id=int(ground_id),grid_id=int(grid_id),object_id=-1,producttime=0,finish=1)
            elif ground_id>=500 and ground_id<=699:
                newbuilding=businessWrite(city_id=int(city_id),ground_id=int(ground_id),grid_id=int(grid_id),object_id=-1,producttime=0,finish=1)
            else:
                newbuilding=businessWrite(city_id=int(city_id),ground_id=int(ground_id),grid_id=int(grid_id),object_id=-1,producttime=ti,finish=0)
            if price>=0:
                if u.corn-price>=0 and u.food-pricefood>=0 and u.labor_num+pop<=u.population and u.wood-wood>=0 and u.stone-stone>=0 and specialgoods(int(ground_id),u.specialgoods,u)==True:
                    u.corn=u.corn-price
                    u.food=u.food-pricefood
                    u.labor_num=u.labor_num+pop
                    u.wood=u.wood-wood
                    u.stone=u.stone-stone
                    if ground_id>=1 and ground_id<=99:
                        u.exp=u.exp+lis[4]
                    elif ground_id>=500 and ground_id<=699:
                        u.populationupbound=u.populationupbound+lis[1]
                    DBSession.add(newbuilding)
                    c1=DBSession.query('LAST_INSERT_ID()')
                    read(city_id)
                    
                    return dict(id=1)
                else:
                    return dict(id=0)
            else:
                if u.cae+price>=0 and u.food-pricefood>=0 and u.labor_num+pop<=u.population and u.wood-wood>=0 and u.stone-stone>=0 and specialgoods(int(ground_id),u.specialgoods,u)==True:
                    u.cae=u.cae+price
                    u.wood=u.wood-wood
                    u.stone=u.stone-stone
                    u.food=u.food-pricefood
                    u.labor_num=u.labor_num+pop
                    if ground_id>=1 and ground_id<=99:
                        u.exp=u.exp+lis[4]
                    elif ground_id>=500 and ground_id<=699:
                        u.populationupbound=u.populationupbound+lis[1]
                    DBSession.add(newbuilding)
                    read(city_id)
                    return dict(id=1)
                else:
                    return dict(id=0)

    
    @expose('json')
    def planting(self,user_id,city_id,grid_id,object_id):
        try:
            price=Plant_Price[int(object_id)][0]
            pricefood=Plant_Price[int(object_id)][1]
            u=DBSession.query(operationalData).filter_by(userid=int(user_id)).one()
            p=DBSession.query(businessWrite).filter_by(city_id=int(city_id)).filter_by(grid_id=int(grid_id)).one()
            ptime=p.producttime;
            if price<0:
                sub=u.cae+price
                if sub>=0 and u.food-pricefood>=0 and ptime==0:
                    sub=u.cae
                    u.food=u.food-pricefood
                    u.corn=sub#to update the datasheet
                    ti=int(time.mktime(time.localtime())-time.mktime(beginTime))
                    p.object_id=int(object_id)
                    p.producttime=ti
                    read(city_id)
                    return dict(id=1)
                else:
                    return dict(id=0)
            elif u.corn-price>=0 and u.food-pricefood>=0 and ptime==0:
                sub=u.corn-price
                u.food=u.food-pricefood
                u.corn=sub#to update the datasheet
                ti=int(time.mktime(time.localtime())-time.mktime(beginTime))
                p.object_id=int(object_id)
                p.producttime=ti
                read(city_id)
                return dict(id=1)
            else:
                return dict(id=0)
        except InvalidRequestError:
            return dict(id=0)
    @expose('json')
    def harvest(self,user_id,city_id,grid_id):
        try:
           p=DBSession.query(businessWrite).filter_by(city_id=int(city_id)).filter_by(grid_id=int(grid_id)).one()
           tu=increasefood[p.object_id]
           p.producttime=0
           p.object_id=-1
           u=DBSession.query(operationalData).filter_by(userid=int(user_id)).one()
           u.exp=u.exp+tu[0]
           u.food=u.food+tu[1]
           read(city_id)
           return dict(id=1)
        except InvalidRequestError:
           return dict(id=0)
    @expose('json')
    def finish_building(self,user_id,city_id,grid_id):
        try:
           p=DBSession.query(businessWrite).filter_by(city_id=int(city_id)).filter_by(grid_id=int(grid_id)).one()
           lis=getGround_id(p.ground_id)
           u=DBSession.query(operationalData).filter_by(userid=int(user_id)).one()
           if p.ground_id>=1 and p.ground_id<=99:
               u.exp=u.exp+lis[4]
           elif p.ground_id>=100 and p.ground_id<=199:
               u.exp=u.exp+lis[4]
           elif p.ground_id >=200 and p.ground_id<=299:
               u.exp=u.exp+lis[5]
           elif p.ground_id>=300 and p.ground_id<=399:
               u.exp=u.exp+lis[5]
           elif p.ground_id>=400 and p.ground_id<=499:
               u.exp=u.exp+lis[3]
               u.populationupbound=u.populationupbound+lis[4]
           elif p.ground_id>=500 and p.ground_id<=699:
               u.populationupbound=u.populationupbound+lis[1]
           p.producttime=0        
           p.finish=1
           read(city_id)
           return dict(id=1)
        except InvalidRequestError:
           return dict(id=0)
    @expose('json')
    def speedup(self,user_id,city_id,grid_id):
        try:
            caesars=1
            p=DBSession.query(businessWrite).filter_by(city_id=int(city_id)).filter_by(grid_id=int(grid_id)).one()
            u=DBSession.query(operationalData).filter_by(userid=int(user_id)).one()
            ti=int(time.mktime(time.localtime())-time.mktime(beginTime))
            t=ti-p.producttime
            
            if p.ground_id==0:
                return dict(id=0)
            elif  p.ground_id>=1 and p.ground_id<=99:
                if p.finish==0:
                    return dict(id=0)                        
                else:
                    caesars=(Plant_Price[p.ground_id-1][3]-t+3600-1)/3600
                    if u.cae-caesars>=0:
                        #u.cae=u.cae-caesars
                        
                        p.producttime=1
                        #u.exp=u.exp+increasefood[p.ground_id-1][0]
                        #u.food=u.food+increasefood[p.ground_id-1][1]
                        read(city_id)
                        return dict(id=1)
                    else:
                        return dict(id=0)
            elif p.ground_id>=100 and p.ground_id<=199:
                if p.finish==0:
                    caesars=(housebuild[p.ground_id-100][5]-t+3600-1)/3600
                    if u.cae-caesars>=0:
                        u.cae=u.cae-caesars
                        p.producttime=0
                        u.exp=u.exp+housebuild[p.ground_id-100][4]
                        p.finish=1
                        read(city_id)
                        return dict(id=1)
                    else:
                        return dict(id=0)
                else:
                    caesars=(houses[p.ground_id-100][3]-t+3600-1)/3600
                    if u.cae-caesars>=0:
                        u.cae=u.cae-caesars
                        p.producttime=1
                        #u.exp=u.exp+houses[p.ground_id-100][2]
                        #if u.population+houses[p.ground_id-100][0]>u.populationupbound:
                            #u.population=u.populationupbound
                        #else:
                            #u.population=u.population+houses[p.ground_id-100][0]
                        read(city_id)
                        return dict(id=1)
                    else:
                        return dict(id=0)
  
            elif p.ground_id>=200 and p.ground_id<=299:
                if p.finish==0:
                    caesars=(milbuild[p.ground_id-200][6]-t+3600-1)/3600
                    if u.cae-caesars>=0:
                        u.cae=u.cae-caesars
                        
                        p.producttime=0
                        u.exp=u.exp+milbuild[p.ground_id-200][5]
                        p.finish=1
                        read(city_id)
                        return dict(id=1)
                    else:
                        return dict(id=0)
                else:
                    if p.object_id>0:
                        caesars=(soldie[p.object_id][3]-t+3600-1)/3600
                        if u.cae-caesars>=0:
                            u.cae=u.cae-caesars
                            sid=p.object_id
                            #if int(sid)>=0 and int(sid)<9:
                                #u.infantry_num=u.infantry_num+soldie[int(sid)][2]
                            #if int(sid)>=9 and int(sid)<18:
                                #u.cavalry_num=u.cavalry_num+soldie[int(sid)][2]
                            #if int(sid)>=18 :
                                #u.scout_num=u.scout_num+soldie[int(sid)][2]
                            #u.exp=u.exp+soldiernum[int(sid)]
                            p.producttime=0
                            p.object_id=-1
                            read(city_id)
                            return dict(id=1)
                        else:
                            return dict(id=0)
                    else:
                        return dict(id=0) 
            elif p.ground_id>=300 and p.ground_id<=399:
                if p.finish==0:
                    caesars=(businessbuild[p.ground_id-300][4]-t+3600-1)/3600
                    if u.cae-caesars>=0:
                        u.cae=u.cae-caesars
                        p.producttime=ti
                        u.exp=u.exp+businessbuild[p.ground_id-300][5]
                        p.finish=1
                        read(city_id)
                        return dict(id=1)
                    else:
                        return dict(id=0)
                else:
                    caesars=(production[p.ground_id-300][3]-t+3600-1)/3600
                    if u.cae-caesars>=0:
                        u.cae=u.cae-caesars
                        p.producttime=1
                        read(city_id)
                        #u.exp=u.exp+production[p.ground_id-300][1]
                        #u.corn=u.corn+production[p.ground_id-300][0]
                    return dict(id=1)     
            elif p.ground_id>=400 and p.ground_id<499:
                if p.finish==0:
                    caesars=(godbuild[p.ground_id-400][5]-t+3600-1)/3600
                    if u.cae-caesars>=0:
                        u.cae=u.cae-caesars
                        p.producttime=0
                        u.exp=u.exp+godbuild[p.ground_id-400][3]
                        u.populationupbound=u.populationupbound+godbuild[p.ground_id-400][4]
                        p.finish=1
                        read(city_id)
                        return dict(id=1)
                    else:
                        return dict(id=0) 
                else:
                    return dict(id=0)                  
        except InvalidRequestError:
            return dict(id=0)

    @expose('json')
    def population(self,user_id,city_id,grid_id):
        try:
                
            p=DBSession.query(businessWrite).filter_by(city_id=int(city_id)).filter_by(grid_id=int(grid_id)).one()
            num=houses[p.ground_id-100][0]
            food=houses[p.ground_id-100][1]
            ti=int(time.mktime(time.localtime())-time.mktime(beginTime))
           
            u=DBSession.query(operationalData).filter_by(userid=int(user_id)).one()
            if u.food-food>=0 and ti-p.producttime>houses[p.ground_id-100][3]:
                p.producttime=ti
                read(city_id)
                return dict(id=1)
            else :
                return dict(f=u.food-food,id=0)
        except InvalidRequestError:
            return dict(id=0)
    @expose('json')
    def finipop(self,user_id,city_id,grid_id):
        try:
            p=DBSession.query(businessWrite).filter_by(city_id=int(city_id)).filter_by(grid_id=int(grid_id)).one()
            u=DBSession.query(operationalData).filter_by(userid=int(user_id)).one()
            num=houses[p.ground_id-100][0]
            if u.population+houses[p.ground_id-100][0]>u.populationupbound:
                u.population=u.populationupbound
            else:
                u.population=u.population+num
            p.producttime=0
            u.exp=u.exp+houses[p.ground_id-100][2]
            read(city_id)
            return dict(id=1)
        except InvalidRequestError:
            return dict(id=0)
    @expose('json')
    def training(self,user_id,city_id,grid_id,sid):
        try:
           p=DBSession.query(businessWrite).filter_by(city_id=int(city_id)).filter_by(grid_id=int(grid_id)).one()
           i=int(sid)
           #three=soldier[i]
           corn=soldie[i][0]
           foo=soldie[i][1]
           pop=soldie[i][2]
           u=DBSession.query(operationalData).filter_by(userid=int(user_id)).one()
           if u.corn-corn>=0 and u.food-foo>=0 and u.population-pop>=0 and p.producttime==0:
               u.corn=u.corn-corn
               u.food=u.food-foo
               u.population=u.population-pop
               p.object_id=sid
               ti=int(time.mktime(time.localtime())-time.mktime(beginTime))
               p.producttime=ti
               read(city_id)
               return dict(id=1)
           else:
               return dict(id=0)
        except InvalidRequestError:
            return dict(id=0)
    @expose('json')
    def soldier(self,user_id,city_id,grid_id):
        try:
           p=DBSession.query(businessWrite).filter_by(city_id=int(city_id)).filter_by(grid_id=int(grid_id)).one()
           u=DBSession.query(operationalData).filter_by(userid=int(user_id)).one()
           sid=p.object_id
           if int(sid)>=0 and int(sid)<9:
               u.infantry_num=u.infantry_num+soldie[int(sid)][2]
           if int(sid)>=9 and int(sid)<18:
               u.cavalry_num=u.cavalry_num+soldie[int(sid)][2]
           if int(sid)>=18 :
               u.scout_num=u.scout_num+soldie[int(sid)][2]
           u.exp=u.exp+soldiernum[int(sid)]
           p.producttime=0
           p.object_id=-1
           read(city_id)
           return dict(id=1)
        except InvalidRequestError:
            return dict(id=0)
    @expose('json')
    def product(self,user_id,city_id,grid_id):
        try:
           p=DBSession.query(businessWrite).filter_by(city_id=int(city_id)).filter_by(grid_id=int(grid_id)).one()
           u=DBSession.query(operationalData).filter_by(userid=int(user_id)).one()
           ti=int(time.mktime(time.localtime())-time.mktime(beginTime))
           if ti-p.producttime>=production[p.ground_id-300][3]:#time
               u.corn=u.corn+production[p.ground_id-300][0]
               u.exp=u.exp+production[p.ground_id-300][1]
               p.producttime=ti
               read(city_id)
               return dict(id=1)
           else:
               return dict(id=0)
        except InvalidRequestError:
            return dict(id=0)
    
    @expose('json')
    def retlev(self,rrstring):
        try:
            dict0={}
            list1=rrstring.split(';')
            for string2 in list1 :
                list2=string2.split(',')
                oid=int(list2[0])
                ukind=int(list2[1])
                try:
                    u=DBSession.query(operationalData).filter_by(otherid=oid).filter_by(user_kind=ukind).one()
                    dict0[list2[0]]=dict(level=u.lev)
                except InvalidRequestError:
                    dict0[list2[0]]=dict(level=-1)
            return dict0
        except InvalidRequestError:
            return dict(idd=-1)               
    @expose('stchong.templates.index')
    def index(self):
        """Handle the front-page."""
        return dict(page='index')

    @expose('stchong.templates.about')
    def about(self):
        """Handle the 'about' page."""
        return dict(page='about')

    @expose('stchong.templates.environ')
    def environ(self):
        """This method showcases TG's access to the wsgi environment."""
        return dict(environment=request.environ)

    @expose('stchong.templates.data')
    @expose('json')
    def data(self, **kw):
        """This method showcases how you can use the same controller for a data page and a display page"""
        return dict(params=kw)

    @expose('stchong.templates.authentication')
    def auth(self):
        """Display some information about auth* on this application."""
        return dict(page='auth')

    @expose('stchong.templates.index')
    @require(predicates.has_permission('manage', msg=l_('Only for managers')))
    def manage_permission_only(self, **kw):
        """Illustrate how a page for managers only works."""
        return dict(page='managers stuff')

    @expose('stchong.templates.index')
    @require(predicates.is_user('editor', msg=l_('Only for the editor')))
    def editor_user_only(self, **kw):
        """Illustrate how a page exclusive for the editor works."""
        return dict(page='editor stuff')

    @expose('stchong.templates.login')
    def login(self, came_from=url('/')):
        """Start the user login."""
        login_counter = request.environ['repoze.who.logins']
        if login_counter > 0:
            flash(_('Wrong credentials'), 'warning')
        return dict(page='login', login_counter=str(login_counter),
                    came_from=came_from)

    @expose()
    def post_login(self, came_from='/'):
        """
        Redirect the user to the initially requested page on successful
        authentication or redirect her back to the login page if login failed.

        """
        if not request.identity:
            login_counter = request.environ['repoze.who.logins'] + 1
            redirect('/login', came_from=came_from, __logins=login_counter)
        userid = request.identity['repoze.who.userid']
        flash(_('Welcome back, %s!') % userid)
        redirect(came_from)

    @expose()
    def post_logout(self, came_from=url('/')):
        """
        Redirect the user to the initially requested page on logout and say
        goodbye as well.

        """
        flash(_('We hope to see you soon!'))
        redirect(came_from)
